; OM File Header - Saved 2021/01/29 12:33:48
; (6.18 :patc (om-make-point 1037 10) (om-make-point -8 -8) (om-make-point 1280 537) "" 183 0 "2020/12/13 11:57:22" "2021/01/29 12:33:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "intonation" (quote ((let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 791 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 684 456) (om-make-point 550 146) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6112) (6112) (6204) (6204) (6204) (6316) (6386) (6702) (6814) (6884))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 914 271) (om-make-point 45 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 855 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 537 263) (om-make-point 182 28) (list 1 6/5 5/4 4/3 3/2 8/5 5/3 2) "(1/1 6/5 5/4 4/3 3/2 8/5 5/3 2/1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 366) (om-make-point 33 28) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Org-RT-Fun" (om-load-patch-abs1 "Org-RT-Fun" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 169 257) (om-make-point 33 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 194 532) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 325 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 205 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Og-rt-fun1" (om-load-patch-abs1 "Og-rt-fun1" (quote ((let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 436 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "expandedset 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 514 312) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.18 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (* (+ x 60) 100))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 388 94) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 149 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 241 148) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 59 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "expandedset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "expandedset" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 415 295) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.18 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (- (/ x 100) 60))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 332 71) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 431 163) (om-make-point 33 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 413 193) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 149 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 241 148) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 59 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (2 1 4 0 nil 0) (3 0 5 0 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "expandedset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OrderFix-List-Note 2" (om-load-patch-abs1 "OrderFix-List-Note" (quote ((let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.18 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (- (/ x 100) 60))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 537 116) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 426 462) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 277 58) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 142 108) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 353 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 425 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 12))) (om-make-point 423 145) (om-make-point 49 58) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 314 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (7 0 1 0 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0) (6 1 5 1 nil 0) (0 0 6 0 nil 0) (3 0 7 0 nil 0) (5 0 7 1 nil 0))) 6.18 nil "" (om-make-point -8 -8) (om-make-point 1280 597)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 2948/5 1188/5) nil (list (list 7205.865 7296.09 7409.775 6300.0 6390.225 6503.91 6594.135 6707.82 6798.045 6911.73 7001.955 7092.18)) nil "OrderFix-List-Note"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 554) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 699 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 530 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 122 99) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 700 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 246 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midi2set" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 267 234) nil nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "expandedset" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 158 128) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.18 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (- (/ x 100) 60))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 346 61) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 425 137) (om-make-point 33 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 12))) (om-make-point 405 188) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 149 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 241 148) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 59 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (2 1 4 0 nil 0) (3 0 5 0 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "expandedset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 290 123) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 64 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "midi2set" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (5 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 8 0 nil 0) (5 0 8 1 nil 0) (0 0 9 0 nil 0) (10 0 9 1 nil 0) (7 0 10 0 nil 0))) 6.18 nil "" (om-make-point -8 -8) (om-make-point 1280 637)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 389/2 544/3) nil (list (list (list 6703.447 7013.6865) (list 6200.0) (list 6200.0 6006.887) (list 6200.0) (list 6703.447 7013.6865) (list 6200.0) (list 6200.0 6006.887) (list 6200.0) (list 6703.447 7013.6865) (list 6200.0) (list 6200.0 6006.887) (list 6200.0) (list 6703.447 7013.6865) (list 6200.0) (list 6200.0 6006.887) (list 6200.0) (list 6006.887 7013.6865) (list 6317.133) (list 6703.447 6200.0) (list 6317.133) (list 6006.887 7013.6865) (list 6317.133) (list 6703.447 6200.0) (list 6317.133) (list 6006.887 7013.6865) (list 6317.133) (list 6703.447 6200.0) (list 6317.133) (list 6006.887 7013.6865) (list 6317.133) (list 6703.447 6200.0) (list 6317.133) (list 6510.295 6896.522) (list 6006.887) (list 6006.887 7013.6865) (list 6006.887) (list 6510.295 6896.522) (list 6006.887) (list 6006.887 7013.6865) (list 6006.887) (list 6510.295 6896.522) (list 6006.887) (list 6006.887 7013.6865) (list 6006.887) (list 6510.295 6896.522) (list 6006.887) (list 6006.887 7013.6865) (list 6006.887) (list 7013.6865 6896.522) (list 6200.0) (list 6510.295 6006.887) (list 6200.0) (list 7013.6865 7013.6865) (list 6200.0) (list 6510.295 6006.887) (list 6200.0) (list 7013.6865 6896.522) (list 6200.0) (list 6510.295 6006.887) (list 6200.0) (list 7013.6865 7013.6865) (list 6200.0) (list 6510.295 6006.887) (list 6200.0))) nil "Og-rt-fun1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midi2EXset 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 114 199) nil nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "expandedset" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 158 128) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.18 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (- (/ x 100) 60))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 81 196) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 149 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 241 148) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 59 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "expandedset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 290 123) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 64 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "midi2exset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 12))) (om-make-point 132 288) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "octaveDisplacement" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 367) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 226 169) (om-make-point 45 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 216 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 362 157) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 89 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 406 270) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 306 270) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "octavedisplacement" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "remap" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 196 446) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 101 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 295 118) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 7 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 162 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 1 0 nil 0) (5 0 2 0 nil 0) (4 0 3 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "remap" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (4 0 6 0 nil 0) (6 0 7 0 nil 0) (0 0 7 1 nil 0) (7 0 8 0 nil 0) (8 0 9 0 nil 0) (5 0 9 1 nil 0))) 6.18 nil "" (om-make-point -8 -8) (om-make-point 1280 577)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 751/2 905/3) nil (list (list (list 4484.359 nil) (list 6315.641) (list 5115.641 6000.0) (list 6315.641) (list 5684.359 nil) (list 6315.641) (list 5115.641 6000.0) (list 6315.641) (list 4484.359 nil) (list 6315.641) (list 5115.641 6000.0) (list 6315.641) (list 5684.359 nil) (list 6315.641) (list 5115.641 6000.0) (list 6315.641) (list 3600.0 nil) (list 6386.3135) (list 4484.359 6315.641) (list 6386.3135) (list 4800.0 nil) (list 6386.3135) (list 4484.359 6315.641) (list 6386.3135) (list 3600.0 nil) (list 6386.3135) (list 4484.359 6315.641) (list 6386.3135) (list 4800.0 nil) (list 6386.3135) (list 4484.359 6315.641) (list 6386.3135) (list 4301.9556 nil) (list 6000.0) (list 4800.0 nil) (list 6000.0) (list 5501.9556 nil) (list 6000.0) (list 4800.0 nil) (list 6000.0) (list 4301.9556 nil) (list 6000.0) (list 4800.0 nil) (list 6000.0) (list 5501.9556 nil) (list 6000.0) (list 4800.0 nil) (list 6000.0) (list nil nil) (list 6315.641) (list 5501.9556 6000.0) (list 6315.641) (list nil nil) (list 6315.641) (list 5501.9556 6000.0) (list 6315.641) (list nil nil) (list 6315.641) (list 5501.9556 6000.0) (list 6315.641) (list nil nil) (list 6315.641) (list 5501.9556 6000.0) (list 6315.641))) nil "Org-RT-Fun"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 422 184) (om-make-point 405 28) (list 256/243 128/81 32/27 16/9 4/3 1 3/2 9/8 27/16 81/64 243/128 729/512) "(256/243 128/81 32/27 16/9 4/3 1/1 3/2 9/8 27/16 81/64 243/128 729/512)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 388 148) (om-make-point 423 28) (list 1.07 1.6 1.1963 1.7889 1.3375 1 1.4953 1.118 1.6719 1.25 1.8692 1.3975) "(1.07 1.6 1.1963 1.7889 1.3375 1. 1.4953 1.1180 1.6719 1.25 1.8692 1.3975)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 494 41) (om-make-point 368 28) (list 1 27/25 9/8 6/5 5/4 27/20 45/32 36/25 3/2 81/50 27/16 9/5 15/8) "(1/1 27/25 9/8 6/5 5/4 27/20 45/32 36/25 3/2 81/50 27/16 9/5 15/8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 357 91) (om-make-point 269 28) (list 9/8 9/8 1 5/3 8/5 16/15 3/2 5/4 6/5 16/15 9/8) "(9/8 9/8 1/1 5/3 8/5 16/15 3/2 5/4 6/5 16/15 9/8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 35 143) (om-make-point 343 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4300 7000) (6200) (5000 6000) (6200) (5500 5800) (6200) (5000 6000) (6200) (4300 7000) (6200) (5000 6000) (6200) (5500 5800) (6200) (5000 6000) (6200) (3600 7000) (6300) (4300 6200) (6300) (4800 5800) (6300) (4300 6200) (6300) (3600 7000) (6300) (4300 6200) (6300) (4800 5800) (6300) (4300 6200) (6300) (4100 6900) (6000) (4800 5800) (6000) (5300 5700) (6000) (4800 5800) (6000) (4100 6900) (6000) (4800 5800) (6000) (5300 5700) (6000) (4800 5800) (6000) (4600 6900) (6200) (5300 6000) (6200) (5800 5800) (6200) (5300 6000) (6200) (4600 6900) (6200) (5300 6000) (6200) (5800 5800) (6200) (5300 6000) (6200))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 16800)) :ldur (quote ((284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 9000) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 1341) (141) (284 141) (141))) :lvel (quote ((80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80))) :loffset (quote ((0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0))) :lchan (quote ((2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2 2) (2))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1280 617) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "G_Minor_Bach.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 50 52) (om-make-point 50 72) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems mode grillestep notechancolor? cmnpref obj-mode zoom deltapict winsize winpos player outport)) (list nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (om-make-point 500 280) (om-make-point 10 40) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 14)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 54 393) (om-make-point 283 196) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4484 4484) (6316) (5116 6000) (6316) (5684 5684) (6316) (5116 6000) (6316) (4484 4484) (6316) (5116 6000) (6316) (5684 5684) (6316) (5116 6000) (6316) (3600 3600) (6386) (4484 6316) (6386) (4800 4800) (6386) (4484 6316) (6386) (3600 3600) (6386) (4484 6316) (6386) (4800 4800) (6386) (4484 6316) (6386) (4302 4302) (6000) (4800 4800) (6000) (5502 5502) (6000) (4800 4800) (6000) (4302 4302) (6000) (4800 4800) (6000) (5502 5502) (6000) (4800 4800) (6000) nil (6316) (5502 6000) (6316) nil (6316) (5502 6000) (6316) nil (6316) (5502 6000) (6316) nil (6316) (5502 6000) (6316))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9591)) :ldur (quote ((284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) (284 141) (141) nil (141) (284 141) (141) nil (141) (284 141) (141) nil (141) (284 141) (141) nil (141) (284 141) (141))) :lvel (quote ((80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) nil (80) (80 80) (80) nil (80) (80 80) (80) nil (80) (80 80) (80) nil (80) (80 80) (80))) :loffset (quote ((0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0))) :lchan (quote ((15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) (15 15) (15) nil (15) (15 15) (15) nil (15) (15 15) (15) nil (15) (15 15) (15) nil (15) (15 15) (15))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0) nil (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 849 381) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 871 36) (om-make-point 229 92) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 633 0) (om-make-point 638 628) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 322 19) (om-make-point 222 28) (list 1 9/8 81/64 4/3 3/2 27/16 243/128) "(1/1 9/8 81/64 4/3 3/2 27/16 243/128)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 1 nil 0) (10 0 3 0 nil 0) (2 0 3 1 nil 0) (11 1 6 0 nil 0) (4 0 6 1 nil 0) (14 1 6 2 nil 0) (12 0 11 0 nil 0) (6 0 13 1 nil 0) (11 2 13 2 nil 0) (11 3 13 3 nil 0) (11 4 13 4 nil 0) (5 0 13 6 nil 0))) nil 6.18))
